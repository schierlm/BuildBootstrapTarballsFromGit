--- 1/configure.ac
+++ 2/configure.ac
@@ -21,7 +21,7 @@
 AC_INIT([GNU tar], [1.22], [bug-tar@gnu.org])
 AC_CONFIG_SRCDIR([src/tar.c])
 AC_CONFIG_AUX_DIR([build-aux])
-AC_CONFIG_HEADERS([config.h])
+AC_CONFIG_HEADERS([config.h:config.hin])
 AC_PREREQ([2.60])
 AM_INIT_AUTOMAKE([1.9 gnits tar-ustar dist-bzip2 dist-shar std-options])
 
@@ -48,6 +48,7 @@
 #endif])
 
 AC_HEADER_SYS_WAIT
+AM_STDBOOL_H
 
 AC_HEADER_DIRENT
 AC_HEADER_MAJOR
@@ -240,7 +241,6 @@
 
 AC_OUTPUT([Makefile\
            doc/Makefile\
-	   gnu/Makefile\
            lib/Makefile\
            po/Makefile.in\
            scripts/Makefile\
--- 1/lib/Makefile.am
+++ 2/lib/Makefile.am
@@ -1,7 +1,7 @@
 # Makefile for GNU tar library.			-*- Makefile -*-
 
 # Copyright (C) 1994, 1995, 1996, 1997, 1999, 2000, 2001, 2003, 2004,
-# 2005, 2006, 2007, 2009 Free Software Foundation, Inc.
+# 2005, 2006, 2007 Free Software Foundation, Inc.
 
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -17,19 +17,19 @@
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 
-noinst_LIBRARIES=libtar.a
+include gnulib.mk
+
 rmt-command.h : Makefile
 	rm -f $@-t $@
 	echo "#ifndef DEFAULT_RMT_COMMAND" >> $@-t
 	echo "# define DEFAULT_RMT_COMMAND \"$(DEFAULT_RMT_DIR)/`echo rmt | sed '$(transform)'`$(EXEEXT)\"" >> $@-t
 	echo "#endif" >> $@-t
 	mv $@-t $@
-BUILT_SOURCES = rmt-command.h
-CLEANFILES = rmt-command.h rmt-command.h-t
-INCLUDES = -I$(top_srcdir)/gnu -I../ -I../gnu 
+BUILT_SOURCES += rmt-command.h
+CLEANFILES += rmt-command.h rmt-command.h-t
 
-noinst_HEADERS = system.h system-ioctl.h rmt.h paxlib.h stdopen.h
-libtar_a_SOURCES = \
+noinst_HEADERS += system.h system-ioctl.h rmt.h paxlib.h stdopen.h
+libtar_a_SOURCES += \
   paxerror.c paxexit.c paxlib.h paxnames.c \
   prepargs.c prepargs.h \
   rtapelib.c \
@@ -37,3 +37,5 @@
   stdopen.c stdopen.h \
   system.h system-ioctl.h
 
+libtar_a_LIBADD += $(LIBOBJS)
+libtar_a_DEPENDENCIES += $(LIBOBJS)
--- 1/lib/modechange.c
+++ 2/lib/modechange.c
@@ -1,10 +1,12 @@
 /* modechange.c -- file mode manipulation
-   Copyright (C) 1989, 1990, 1997, 1998, 1999 Free Software Foundation, Inc.
 
-   This program is free software; you can redistribute it and/or modify
+   Copyright (C) 1989, 1990, 1997, 1998, 1999, 2001, 2003, 2004, 2005,
+   2006 Free Software Foundation, Inc.
+
+   This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
@@ -12,434 +14,372 @@
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
-   along with this program; if not, write to the Free Software Foundation,
-   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
 
 /* Written by David MacKenzie <djm@ai.mit.edu> */
 
-/* The ASCII mode string is compiled into a linked list of `struct
+/* The ASCII mode string is compiled into an array of `struct
    modechange', which can then be applied to each file to be changed.
    We do this instead of re-parsing the ASCII string for each file
    because the compiled form requires less computation to use; when
    changing the mode of many files, this probably results in a
-   performance gain. */
+   performance gain.  */
 
-#if HAVE_CONFIG_H
-# include <config.h>
-#endif
+#include <config.h>
 
 #include "modechange.h"
 #include <sys/stat.h>
-#include "xstrtol.h"
+#include "stat-macros.h"
+#include "xalloc.h"
+#include <stdlib.h>
+
+/* The traditional octal values corresponding to each mode bit.  */
+#define SUID 04000
+#define SGID 02000
+#define SVTX 01000
+#define RUSR 00400
+#define WUSR 00200
+#define XUSR 00100
+#define RGRP 00040
+#define WGRP 00020
+#define XGRP 00010
+#define ROTH 00004
+#define WOTH 00002
+#define XOTH 00001
+#define ALLM 07777 /* all octal mode bits */
+
+/* Convert OCTAL, which uses one of the traditional octal values, to
+   an internal mode_t value.  */
+static mode_t
+octal_to_mode (unsigned int octal)
+{
+  /* Help the compiler optimize the usual case where mode_t uses
+     the traditional octal representation.  */
+  return ((S_ISUID == SUID && S_ISGID == SGID && S_ISVTX == SVTX
+	   && S_IRUSR == RUSR && S_IWUSR == WUSR && S_IXUSR == XUSR
+	   && S_IRGRP == RGRP && S_IWGRP == WGRP && S_IXGRP == XGRP
+	   && S_IROTH == ROTH && S_IWOTH == WOTH && S_IXOTH == XOTH)
+	  ? octal
+	  : (mode_t) ((octal & SUID ? S_ISUID : 0)
+		      | (octal & SGID ? S_ISGID : 0)
+		      | (octal & SVTX ? S_ISVTX : 0)
+		      | (octal & RUSR ? S_IRUSR : 0)
+		      | (octal & WUSR ? S_IWUSR : 0)
+		      | (octal & XUSR ? S_IXUSR : 0)
+		      | (octal & RGRP ? S_IRGRP : 0)
+		      | (octal & WGRP ? S_IWGRP : 0)
+		      | (octal & XGRP ? S_IXGRP : 0)
+		      | (octal & ROTH ? S_IROTH : 0)
+		      | (octal & WOTH ? S_IWOTH : 0)
+		      | (octal & XOTH ? S_IXOTH : 0)));
+}
+
+/* Special operations flags.  */
+enum
+  {
+    /* For the sentinel at the end of the mode changes array.  */
+    MODE_DONE,
+
+    /* The typical case.  */
+    MODE_ORDINARY_CHANGE,
+
+    /* In addition to the typical case, affect the execute bits if at
+       least one execute bit is set already, or if the file is a
+       directory.  */
+    MODE_X_IF_ANY_X,
+
+    /* Instead of the typical case, copy some existing permissions for
+       u, g, or o onto the other two.  Which of u, g, or o is copied
+       is determined by which bits are set in the `value' field.  */
+    MODE_COPY_EXISTING
+  };
 
-#if STDC_HEADERS
-# include <stdlib.h>
-#else
-char *malloc ();
-#endif
-
-#ifndef NULL
-# define NULL 0
-#endif
-
-#if STAT_MACROS_BROKEN
-# undef S_ISDIR
-#endif
-
-#if !defined(S_ISDIR) && defined(S_IFDIR)
-# define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
-#endif
-
-#ifndef S_ISUID
-# define S_ISUID 04000
-#endif
-#ifndef S_ISGID
-# define S_ISGID 04000
-#endif
-#ifndef S_ISVTX
-# define S_ISVTX 01000
-#endif
-#ifndef S_IRUSR
-# define S_IRUSR 0400
-#endif
-#ifndef S_IWUSR
-# define S_IWUSR 0200
-#endif
-#ifndef S_IXUSR
-# define S_IXUSR 0100
-#endif
-#ifndef S_IRGRP
-# define S_IRGRP 0040
-#endif
-#ifndef S_IWGRP
-# define S_IWGRP 0020
-#endif
-#ifndef S_IXGRP
-# define S_IXGRP 0010
-#endif
-#ifndef S_IROTH
-# define S_IROTH 0004
-#endif
-#ifndef S_IWOTH
-# define S_IWOTH 0002
-#endif
-#ifndef S_IXOTH
-# define S_IXOTH 0001
-#endif
-#ifndef S_IRWXU
-# define S_IRWXU 0700
-#endif
-#ifndef S_IRWXG
-# define S_IRWXG 0070
-#endif
-#ifndef S_IRWXO
-# define S_IRWXO 0007
-#endif
-
-/* All the mode bits that can be affected by chmod.  */
-#define CHMOD_MODE_BITS \
-  (S_ISUID | S_ISGID | S_ISVTX | S_IRWXU | S_IRWXG | S_IRWXO)
-
-/* Return newly allocated memory to hold one element of type TYPE. */
-#define talloc(type) ((type *) malloc (sizeof (type)))
-
-/* Create a mode_change entry with the specified `=ddd'-style
-   mode change operation, where NEW_MODE is `ddd'.  Return the
-   new entry, or NULL upon failure.  */
+/* Description of a mode change.  */
+struct mode_change
+{
+  char op;			/* One of "=+-".  */
+  char flag;			/* Special operations flag.  */
+  mode_t affected;		/* Set for u, g, o, or a.  */
+  mode_t value;			/* Bits to add/remove.  */
+  mode_t mentioned;		/* Bits explicitly mentioned.  */
+};
+
+/* Return a mode_change array with the specified `=ddd'-style
+   mode change operation, where NEW_MODE is `ddd' and MENTIONED
+   contains the bits explicitly mentioned in the mode are MENTIONED.  */
 
 static struct mode_change *
-make_node_op_equals (mode_t new_mode)
+make_node_op_equals (mode_t new_mode, mode_t mentioned)
 {
-  struct mode_change *p;
-  p = talloc (struct mode_change);
-  if (p == NULL)
-    return p;
-  p->next = NULL;
+  struct mode_change *p = xmalloc (2 * sizeof *p);
   p->op = '=';
-  p->flags = 0;
+  p->flag = MODE_ORDINARY_CHANGE;
+  p->affected = CHMOD_MODE_BITS;
   p->value = new_mode;
-  p->affected = CHMOD_MODE_BITS;	/* Affect all permissions. */
+  p->mentioned = mentioned;
+  p[1].flag = MODE_DONE;
   return p;
 }
 
-/* Append entry E to the end of the link list with the specified
-   HEAD and TAIL.  */
-
-static void
-mode_append_entry (struct mode_change **head,
-		   struct mode_change **tail,
-		   struct mode_change *e)
-{
-  if (*head == NULL)
-    *head = *tail = e;
-  else
-    {
-      (*tail)->next = e;
-      *tail = e;
-    }
-}
-
-/* Return a linked list of file mode change operations created from
+/* Return a pointer to an array of file mode change operations created from
    MODE_STRING, an ASCII string that contains either an octal number
    specifying an absolute mode, or symbolic mode change operations with
    the form:
    [ugoa...][[+-=][rwxXstugo...]...][,...]
-   MASKED_OPS is a bitmask indicating which symbolic mode operators (=+-)
-   should not affect bits set in the umask when no users are given.
-   Operators not selected in MASKED_OPS ignore the umask.
-
-   Return MODE_INVALID if `mode_string' does not contain a valid
-   representation of file mode change operations;
-   return MODE_MEMORY_EXHAUSTED if there is insufficient memory. */
+
+   Return NULL if `mode_string' does not contain a valid
+   representation of file mode change operations.  */
 
 struct mode_change *
-mode_compile (const char *mode_string, unsigned int masked_ops)
+mode_compile (char const *mode_string)
 {
-  struct mode_change *head;	/* First element of the linked list. */
-  struct mode_change *tail;	/* An element of the linked list. */
-  uintmax_t mode_value;		/* The mode value, if octal.  */
-  char *string_end;		/* Pointer to end of parsed value.  */
-  mode_t umask_value;		/* The umask value (surprise). */
-
-  head = NULL;
-#ifdef lint
-  tail = NULL;
-#endif
+  /* The array of mode-change directives to be returned.  */
+  struct mode_change *mc;
+  size_t used = 0;
 
-  if (xstrtoumax (mode_string, &string_end, 8, &mode_value, "") == LONGINT_OK)
+  if ('0' <= *mode_string && *mode_string < '8')
     {
-      struct mode_change *p;
-      if (mode_value != (mode_value & CHMOD_MODE_BITS))
-	return MODE_INVALID;
-      p = make_node_op_equals ((mode_t) mode_value);
-      if (p == NULL)
-	return MODE_MEMORY_EXHAUSTED;
-      mode_append_entry (&head, &tail, p);
-      return head;
+      unsigned int octal_mode = 0;
+      mode_t mode;
+      mode_t mentioned;
+
+      do
+	{
+	  octal_mode = 8 * octal_mode + *mode_string++ - '0';
+	  if (ALLM < octal_mode)
+	    return NULL;
+	}
+      while ('0' <= *mode_string && *mode_string < '8');
+
+      if (*mode_string)
+	return NULL;
+
+      mode = octal_to_mode (octal_mode);
+      mentioned = (mode & (S_ISUID | S_ISGID)) | S_ISVTX | S_IRWXUGO;
+      return make_node_op_equals (mode, mentioned);
     }
 
-  umask_value = umask (0);
-  umask (umask_value);		/* Restore the old value. */
-  --mode_string;
+  /* Allocate enough space to hold the result.  */
+  {
+    size_t needed = 1;
+    char const *p;
+    for (p = mode_string; *p; p++)
+      needed += (*p == '=' || *p == '+' || *p == '-');
+    mc = xnmalloc (needed, sizeof *mc);
+  }
 
-  /* One loop iteration for each "ugoa...=+-rwxXstugo...[=+-rwxXstugo...]". */
-  do
+  /* One loop iteration for each `[ugoa]*([-+=]([rwxXst]*|[ugo]))+'.  */
+  for (;; mode_string++)
     {
-      /* Which bits in the mode are operated on. */
-      mode_t affected_bits = 0;
-      /* `affected_bits' modified by umask. */
-      mode_t affected_masked;
-      /* Operators to actually use umask on. */
-      unsigned ops_to_mask = 0;
-
-      int who_specified_p;
-
-      affected_bits = 0;
-      ops_to_mask = 0;
-      /* Turn on all the bits in `affected_bits' for each group given. */
-      for (++mode_string;; ++mode_string)
+      /* Which bits in the mode are operated on.  */
+      mode_t affected = 0;
+
+      /* Turn on all the bits in `affected' for each group given.  */
+      for (;; mode_string++)
 	switch (*mode_string)
 	  {
+	  default:
+	    goto invalid;
 	  case 'u':
-	    affected_bits |= S_ISUID | S_IRWXU;
+	    affected |= S_ISUID | S_IRWXU;
 	    break;
 	  case 'g':
-	    affected_bits |= S_ISGID | S_IRWXG;
+	    affected |= S_ISGID | S_IRWXG;
 	    break;
 	  case 'o':
-	    affected_bits |= S_ISVTX | S_IRWXO;
+	    affected |= S_ISVTX | S_IRWXO;
 	    break;
 	  case 'a':
-	    affected_bits |= CHMOD_MODE_BITS;
+	    affected |= CHMOD_MODE_BITS;
 	    break;
-	  default:
+	  case '=': case '+': case '-':
 	    goto no_more_affected;
 	  }
+    no_more_affected:;
 
-    no_more_affected:
-      /* If none specified, affect all bits, except perhaps those
-	 set in the umask. */
-      if (affected_bits)
-	who_specified_p = 1;
-      else
-	{
-	  who_specified_p = 0;
-	  affected_bits = CHMOD_MODE_BITS;
-	  ops_to_mask = masked_ops;
-	}
-
-      while (*mode_string == '=' || *mode_string == '+' || *mode_string == '-')
+      do
 	{
-	  struct mode_change *change = talloc (struct mode_change);
-	  if (change == NULL)
-	    {
-	      mode_free (head);
-	      return MODE_MEMORY_EXHAUSTED;
-	    }
+	  char op = *mode_string++;
+	  mode_t value;
+	  char flag = MODE_COPY_EXISTING;
+	  struct mode_change *change;
 
-	  change->next = NULL;
-	  change->op = *mode_string;	/* One of "=+-". */
-	  affected_masked = affected_bits;
-
-	  /* Per the Single Unix Spec, if `who' is not specified and the
-	     `=' operator is used, then clear all the bits first.  */
-	  if (!who_specified_p &&
-	      ops_to_mask & (*mode_string == '=' ? MODE_MASK_EQUALS : 0))
+	  switch (*mode_string++)
 	    {
-	      struct mode_change *p = make_node_op_equals (0);
-	      if (p == NULL)
-		return MODE_MEMORY_EXHAUSTED;
-	      mode_append_entry (&head, &tail, p);
+	    case 'u':
+	      /* Set the affected bits to the value of the `u' bits
+		 on the same file.  */
+	      value = S_IRWXU;
+	      break;
+	    case 'g':
+	      /* Set the affected bits to the value of the `g' bits
+		 on the same file.  */
+	      value = S_IRWXG;
+	      break;
+	    case 'o':
+	      /* Set the affected bits to the value of the `o' bits
+		 on the same file.  */
+	      value = S_IRWXO;
+	      break;
+
+	    default:
+	      value = 0;
+	      flag = MODE_ORDINARY_CHANGE;
+
+	      for (mode_string--;; mode_string++)
+		switch (*mode_string)
+		  {
+		  case 'r':
+		    value |= S_IRUSR | S_IRGRP | S_IROTH;
+		    break;
+		  case 'w':
+		    value |= S_IWUSR | S_IWGRP | S_IWOTH;
+		    break;
+		  case 'x':
+		    value |= S_IXUSR | S_IXGRP | S_IXOTH;
+		    break;
+		  case 'X':
+		    flag = MODE_X_IF_ANY_X;
+		    break;
+		  case 's':
+		    /* Set the setuid/gid bits if `u' or `g' is selected.  */
+		    value |= S_ISUID | S_ISGID;
+		    break;
+		  case 't':
+		    /* Set the "save text image" bit if `o' is selected.  */
+		    value |= S_ISVTX;
+		    break;
+		  default:
+		    goto no_more_values;
+		  }
+	    no_more_values:;
 	    }
 
-	  if (ops_to_mask & (*mode_string == '=' ? MODE_MASK_EQUALS
-			     : *mode_string == '+' ? MODE_MASK_PLUS
-			     : MODE_MASK_MINUS))
-	    affected_masked &= ~umask_value;
-	  change->affected = affected_masked;
-	  change->value = 0;
-	  change->flags = 0;
-
-	  /* Add the element to the tail of the list, so the operations
-	     are performed in the correct order. */
-	  mode_append_entry (&head, &tail, change);
-
-	  /* Set `value' according to the bits set in `affected_masked'. */
-	  for (++mode_string;; ++mode_string)
-	    switch (*mode_string)
-	      {
-	      case 'r':
-		change->value |= ((S_IRUSR | S_IRGRP | S_IROTH)
-				  & affected_masked);
-		break;
-	      case 'w':
-		change->value |= ((S_IWUSR | S_IWGRP | S_IWOTH)
-				  & affected_masked);
-		break;
-	      case 'X':
-		change->flags |= MODE_X_IF_ANY_X;
-		/* Fall through. */
-	      case 'x':
-		change->value |= ((S_IXUSR | S_IXGRP | S_IXOTH)
-				  & affected_masked);
-		break;
-	      case 's':
-		/* Set the setuid/gid bits if `u' or `g' is selected. */
-		change->value |= (S_ISUID | S_ISGID) & affected_masked;
-		break;
-	      case 't':
-		/* Set the "save text image" bit if `o' is selected. */
-		change->value |= S_ISVTX & affected_masked;
-		break;
-	      case 'u':
-		/* Set the affected bits to the value of the `u' bits
-		   on the same file.  */
-		if (change->value)
-		  goto invalid;
-		change->value = S_IRWXU;
-		change->flags |= MODE_COPY_EXISTING;
-		break;
-	      case 'g':
-		/* Set the affected bits to the value of the `g' bits
-		   on the same file.  */
-		if (change->value)
-		  goto invalid;
-		change->value = S_IRWXG;
-		change->flags |= MODE_COPY_EXISTING;
-		break;
-	      case 'o':
-		/* Set the affected bits to the value of the `o' bits
-		   on the same file.  */
-		if (change->value)
-		  goto invalid;
-		change->value = S_IRWXO;
-		change->flags |= MODE_COPY_EXISTING;
-		break;
-	      default:
-		goto no_more_values;
-	      }
-	no_more_values:;
+	  change = &mc[used++];
+	  change->op = op;
+	  change->flag = flag;
+	  change->affected = affected;
+	  change->value = value;
+	  change->mentioned = (affected ? affected & value : value);
 	}
-  } while (*mode_string == ',');
+      while (*mode_string == '=' || *mode_string == '+'
+	     || *mode_string == '-');
+
+      if (*mode_string != ',')
+	break;
+    }
+
   if (*mode_string == 0)
-    return head;
+    {
+      mc[used].flag = MODE_DONE;
+      return mc;
+    }
+
 invalid:
-  mode_free (head);
-  return MODE_INVALID;
+  free (mc);
+  return NULL;
 }
 
 /* Return a file mode change operation that sets permissions to match those
-   of REF_FILE.  Return MODE_BAD_REFERENCE if REF_FILE can't be accessed.  */
+   of REF_FILE.  Return NULL (setting errno) if REF_FILE can't be accessed.  */
 
 struct mode_change *
 mode_create_from_ref (const char *ref_file)
 {
-  struct mode_change *change;	/* the only change element */
   struct stat ref_stats;
 
-  if (stat (ref_file, &ref_stats))
-    return MODE_BAD_REFERENCE;
-
-  change = talloc (struct mode_change);
-
-  if (change == NULL)
-    return MODE_MEMORY_EXHAUSTED;
-
-  change->op = '=';
-  change->flags = 0;
-  change->affected = CHMOD_MODE_BITS;
-  change->value = ref_stats.st_mode;
-  change->next = NULL;
-
-  return change;
+  if (stat (ref_file, &ref_stats) != 0)
+    return NULL;
+  return make_node_op_equals (ref_stats.st_mode, CHMOD_MODE_BITS);
 }
 
-/* Return file mode OLDMODE, adjusted as indicated by the list of change
-   operations CHANGES.  If OLDMODE is a directory, the type `X'
-   change affects it even if no execute bits were set in OLDMODE.
-   The returned value has the S_IFMT bits cleared. */
+/* Return the file mode bits of OLDMODE (which is the mode of a
+   directory if DIR), assuming the umask is UMASK_VALUE, adjusted as
+   indicated by the list of change operations CHANGES.  If DIR, the
+   type 'X' change affects the returned value even if no execute bits
+   were set in OLDMODE, and set user and group ID bits are preserved
+   unless CHANGES mentioned them.  If PMODE_BITS is not null, store into
+   *PMODE_BITS a mask denoting file mode bits that are affected by
+   CHANGES.
+
+   The returned value and *PMODE_BITS contain only file mode bits.
+   For example, they have the S_IFMT bits cleared on a standard
+   Unix-like host.  */
 
 mode_t
-mode_adjust (mode_t oldmode, const struct mode_change *changes)
+mode_adjust (mode_t oldmode, bool dir, mode_t umask_value,
+	     struct mode_change const *changes, mode_t *pmode_bits)
 {
-  mode_t newmode;	/* The adjusted mode and one operand. */
-  mode_t value;		/* The other operand. */
+  /* The adjusted mode.  */
+  mode_t newmode = oldmode & CHMOD_MODE_BITS;
 
-  newmode = oldmode & CHMOD_MODE_BITS;
+  /* File mode bits that CHANGES cares about.  */
+  mode_t mode_bits = 0;
 
-  for (; changes; changes = changes->next)
+  for (; changes->flag != MODE_DONE; changes++)
     {
-      if (changes->flags & MODE_COPY_EXISTING)
-	{
-	  /* Isolate in `value' the bits in `newmode' to copy, given in
-	     the mask `changes->value'. */
-	  value = newmode & changes->value;
-
-	  if (changes->value & S_IRWXU)
-	    /* Copy `u' permissions onto `g' and `o'. */
-	    value |= ((value & S_IRUSR ? S_IRGRP | S_IROTH : 0)
-		      | (value & S_IWUSR ? S_IWGRP | S_IROTH : 0)
-		      | (value & S_IXUSR ? S_IXGRP | S_IXOTH : 0));
-	  else if (changes->value & S_IRWXG)
-	    /* Copy `g' permissions onto `u' and `o'. */
-	    value |= ((value & S_IRGRP ? S_IRUSR | S_IROTH : 0)
-		      | (value & S_IWGRP ? S_IWUSR | S_IROTH : 0)
-		      | (value & S_IXGRP ? S_IXUSR | S_IXOTH : 0));
-	  else
-	    /* Copy `o' permissions onto `u' and `g'. */
-	    value |= ((value & S_IROTH ? S_IRUSR | S_IRGRP : 0)
-		      | (value & S_IWOTH ? S_IWUSR | S_IRGRP : 0)
-		      | (value & S_IXOTH ? S_IXUSR | S_IXGRP : 0));
-
-	  /* In order to change only `u', `g', or `o' permissions,
-	     or some combination thereof, clear unselected bits.
-	     This can not be done in mode_compile because the value
-	     to which the `changes->affected' mask is applied depends
-	     on the old mode of each file. */
-	  value &= changes->affected;
-	}
-      else
+      mode_t affected = changes->affected;
+      mode_t omit_change =
+	(dir ? S_ISUID | S_ISGID : 0) & ~ changes->mentioned;
+      mode_t value = changes->value;
+
+      switch (changes->flag)
 	{
-	  value = changes->value;
-	  /* If `X', do not affect the execute bits if the file is not a
-	     directory and no execute bits are already set. */
-	  if ((changes->flags & MODE_X_IF_ANY_X)
-	      && !S_ISDIR (oldmode)
-	      && (newmode & (S_IXUSR | S_IXGRP | S_IXOTH)) == 0)
-	    /* Clear the execute bits. */
-	    value &= ~ (S_IXUSR | S_IXGRP | S_IXOTH);
+	case MODE_ORDINARY_CHANGE:
+	  break;
+
+	case MODE_COPY_EXISTING:
+	  /* Isolate in `value' the bits in `newmode' to copy.  */
+	  value &= newmode;
+
+	  /* Copy the isolated bits to the other two parts.  */
+	  value |= ((value & (S_IRUSR | S_IRGRP | S_IROTH)
+		     ? S_IRUSR | S_IRGRP | S_IROTH : 0)
+		    | (value & (S_IWUSR | S_IWGRP | S_IWOTH)
+		       ? S_IWUSR | S_IWGRP | S_IWOTH : 0)
+		    | (value & (S_IXUSR | S_IXGRP | S_IXOTH)
+		       ? S_IXUSR | S_IXGRP | S_IXOTH : 0));
+	  break;
+
+	case MODE_X_IF_ANY_X:
+	  /* Affect the execute bits if execute bits are already set
+	     or if the file is a directory.  */
+	  if ((newmode & (S_IXUSR | S_IXGRP | S_IXOTH)) | dir)
+	    value |= S_IXUSR | S_IXGRP | S_IXOTH;
+	  break;
 	}
 
+      /* If WHO was specified, limit the change to the affected bits.
+	 Otherwise, apply the umask.  Either way, omit changes as
+	 requested.  */
+      value &= (affected ? affected : ~umask_value) & ~ omit_change;
+
       switch (changes->op)
 	{
 	case '=':
-	  /* Preserve the previous values in `newmode' of bits that are
-	     not affected by this change operation. */
-	  newmode = (newmode & ~changes->affected) | value;
-	  break;
+	  /* If WHO was specified, preserve the previous values of
+	     bits that are not affected by this change operation.
+	     Otherwise, clear all the bits.  */
+	  {
+	    mode_t preserved = (affected ? ~affected : 0) | omit_change;
+	    mode_bits |= CHMOD_MODE_BITS & ~preserved;
+	    newmode = (newmode & preserved) | value;
+	    break;
+	  }
+
 	case '+':
+	  mode_bits |= value;
 	  newmode |= value;
 	  break;
+
 	case '-':
+	  mode_bits |= value;
 	  newmode &= ~value;
 	  break;
 	}
     }
-  return newmode;
-}
-
-/* Free the memory used by the list of file mode change operations
-   CHANGES. */
-
-void
-mode_free (register struct mode_change *changes)
-{
-  register struct mode_change *next;
 
-  while (changes)
-    {
-      next = changes->next;
-      free (changes);
-      changes = next;
-    }
+  if (pmode_bits)
+    *pmode_bits = mode_bits;
+  return newmode;
 }
--- 1/Makefile.am
+++ 2/Makefile.am
@@ -1,7 +1,7 @@
 # Main Makefile for GNU tar.
 
-# Copyright (C) 1994, 1995, 1996, 1997, 1999, 2000, 2001, 2003, 2007,
-# 2009 Free Software Foundation, Inc.
+# Copyright (C) 1994, 1995, 1996, 1997, 1999, 2000, 2001, 2003, 2007 Free
+# Software Foundation, Inc.
 
 ## This program is free software; you can redistribute it and/or modify
 ## it under the terms of the GNU General Public License as published by
@@ -19,22 +19,13 @@
 ## 02110-1301, USA.
 
 ACLOCAL_AMFLAGS = -I m4
-EXTRA_DIST = ChangeLog.1 Make.rules
-SUBDIRS = doc gnu lib rmt src scripts po tests
+EXTRA_DIST = ChangeLog.1 PORTS
+SUBDIRS = doc lib rmt src scripts po tests
 
 dist-hook: 
-	$(MAKE) changelog_dir=$(distdir) make-ChangeLog
 	-rm -f $(distdir).cpio
 	find $(distdir) | cpio -Hcrc -o | \
           GZIP=$(GZIP_ENV) gzip -c > $(distdir).cpio.gz
 
 distclean-local:
 	-rm -f $(distdir).cpio.gz
-
-include Make.rules
-
-gen_start_date = 2009-03-06
-prev_change_log = ChangeLog.CVS
-changelog_dir = .
-
-
--- 1/po/POTFILES.in
+++ 2/po/POTFILES.in
@@ -19,27 +19,26 @@
 # 02110-1301, USA.
 
 # Library files
-gnu/argmatch.c
-gnu/argp-help.c
-gnu/argp-parse.c
-gnu/closeout.c
-gnu/error.c
-gnu/getopt.c
-gnu/obstack.c
-gnu/human.c
-gnu/obstack.c
-gnu/openat-die.c
-gnu/quotearg.c
-gnu/rpmatch.c
-gnu/xalloc-die.c
-gnu/xmalloc.c
-gnu/version-etc.c
-gnu/xalloc-die.c
-
+lib/argmatch.c
+lib/argp-help.c
+lib/argp-parse.c
+lib/closeout.c
+lib/error.c
+lib/getopt.c
+lib/obstack.c
+lib/human.c
+lib/obstack.c
+lib/openat-die.c
 lib/paxerror.c
 lib/paxexit.c
 lib/paxnames.c
+lib/quotearg.c
+lib/rpmatch.c
 lib/rtapelib.c
+lib/xalloc-die.c
+lib/xmalloc.c
+lib/version-etc.c
+lib/xalloc-die.c
 
 rmt/rmt.c
 
--- 1/src/Makefile.am
+++ 2/src/Makefile.am
@@ -1,7 +1,7 @@
 # Makefile for GNU tar sources.
 
 # Copyright (C) 1994, 1995, 1996, 1997, 1999, 2000, 2001, 2003, 2006,
-# 2007, 2009 Free Software Foundation, Inc.
+# 2007 Free Software Foundation, Inc.
 
 ## This program is free software; you can redistribute it and/or modify
 ## it under the terms of the GNU General Public License as published by
@@ -41,8 +41,8 @@
  update.c\
  utf8.c
 
-INCLUDES = -I$(top_srcdir)/gnu -I../ -I../gnu -I$(top_srcdir)/lib
+INCLUDES = -I$(top_srcdir)/lib -I../ -I../lib
 
-LDADD = ../lib/libtar.a ../gnu/libgnu.a $(LIBINTL) $(LIBICONV)
+LDADD = ../lib/libtar.a $(LIBINTL) $(LIBICONV)
 
 tar_LDADD = $(LDADD) $(LIB_CLOCK_GETTIME)
--- 1/src/Makefile.in
+++ 2/src/Makefile.in
@@ -17,7 +17,7 @@
 # Makefile for GNU tar sources.
 
 # Copyright (C) 1994, 1995, 1996, 1997, 1999, 2000, 2001, 2003, 2006,
-# 2007, 2009 Free Software Foundation, Inc.
+# 2007 Free Software Foundation, Inc.
 
 
 VPATH = @srcdir@
@@ -41,7 +41,7 @@
 bin_PROGRAMS = tar$(EXEEXT)
 subdir = src
 DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
-	$(srcdir)/Makefile.in ansi2knr.1 ansi2knr.c
+	$(srcdir)/Makefile.in
 ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/m4/00gnulib.m4 \
 	$(top_srcdir)/m4/alloca.m4 $(top_srcdir)/m4/argmatch.m4 \
@@ -132,7 +132,7 @@
 	$(top_srcdir)/m4/xstrtol.m4 $(top_srcdir)/configure.ac
 am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
 	$(ACLOCAL_M4)
-mkinstalldirs = $(install_sh) -d
+mkinstalldirs = $(SHELL) $(top_srcdir)/build-aux/mkinstalldirs
 CONFIG_HEADER = $(top_builddir)/config.h
 CONFIG_CLEAN_FILES =
 am__installdirs = "$(DESTDIR)$(bindir)"
@@ -146,8 +146,8 @@
 	transform.$(OBJEXT) update.$(OBJEXT) utf8.$(OBJEXT)
 tar_OBJECTS = $(am_tar_OBJECTS)
 am__DEPENDENCIES_1 =
-am__DEPENDENCIES_2 = ../lib/libtar.a ../gnu/libgnu.a \
-	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
+am__DEPENDENCIES_2 = ../lib/libtar.a $(am__DEPENDENCIES_1) \
+	$(am__DEPENDENCIES_1)
 tar_DEPENDENCIES = $(am__DEPENDENCIES_2) $(am__DEPENDENCIES_1)
 DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
 depcomp = $(SHELL) $(top_srcdir)/build-aux/depcomp
@@ -457,12 +457,12 @@
 INTL_MACOSX_LIBS = @INTL_MACOSX_LIBS@
 INTTYPES_H = @INTTYPES_H@
 LDFLAGS = @LDFLAGS@
-LIBGNU_LIBDEPS = @LIBGNU_LIBDEPS@
-LIBGNU_LTLIBDEPS = @LIBGNU_LTLIBDEPS@
 LIBICONV = @LIBICONV@
 LIBINTL = @LIBINTL@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
+LIBTAR_LIBDEPS = @LIBTAR_LIBDEPS@
+LIBTAR_LTLIBDEPS = @LIBTAR_LTLIBDEPS@
 LIB_CLOCK_GETTIME = @LIB_CLOCK_GETTIME@
 LIB_CLOSE = @LIB_CLOSE@
 LIB_SETSOCKOPT = @LIB_SETSOCKOPT@
@@ -674,8 +674,8 @@
  update.c\
  utf8.c
 
-INCLUDES = -I$(top_srcdir)/gnu -I../ -I../gnu -I$(top_srcdir)/lib
-LDADD = ../lib/libtar.a ../gnu/libgnu.a $(LIBINTL) $(LIBICONV)
+INCLUDES = -I$(top_srcdir)/lib -I../ -I../lib
+LDADD = ../lib/libtar.a $(LIBINTL) $(LIBICONV)
 tar_LDADD = $(LDADD) $(LIB_CLOCK_GETTIME)
 all: all-am
 
--- 1/tests/Makefile.am
+++ 2/tests/Makefile.am
@@ -1,7 +1,7 @@
 # Makefile for GNU tar regression tests.
 
 # Copyright (C) 1996, 1997, 1999, 2000, 2001, 2003, 2004, 2005, 
-# 2006, 2007, 2009 Free Software Foundation, Inc.
+# 2006, 2007 Free Software Foundation, Inc.
 
 # François Pinard <pinard@iro.umontreal.ca>, 1988.
 # Sergey Poznyakoff <gray@mirddin.farlep.net>, 2004.
@@ -161,6 +161,6 @@
 genfile_SOURCES = genfile.c argcv.c argcv.h
 
 localedir = $(datadir)/locale
-INCLUDES = -I$(top_srcdir)/gnu -I../gnu -I$(top_srcdir)/gnu -I$(top_srcdir)/lib
+INCLUDES = -I$(top_srcdir)/lib -I../lib -I$(top_srcdir)/src
 AM_CPPFLAGS = -DLOCALEDIR=\"$(localedir)\"
-LDADD = ../gnu/libgnu.a $(LIBINTL) $(LIB_CLOCK_GETTIME)
+LDADD = ../lib/libtar.a $(LIBINTL) $(LIB_CLOCK_GETTIME)
