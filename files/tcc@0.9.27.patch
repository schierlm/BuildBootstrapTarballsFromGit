diff -ur extracted/git/win32/build-tcc.bat extracted/tarball/win32/build-tcc.bat
--- extracted/git/win32/build-tcc.bat	2022-06-04 13:47:38.913998421 +0200
+++ extracted/tarball/win32/build-tcc.bat	2017-12-17 09:27:05.000000000 +0100
@@ -1,189 +1,189 @@
-@rem ------------------------------------------------------
-@rem batch file to build tcc using mingw, msvc or tcc itself
-@rem ------------------------------------------------------
-
-@echo off
-setlocal
-if (%1)==(-clean) goto :cleanup
-set CC=gcc
-set /p VERSION= < ..\VERSION
-set INST=
-set BIN=
-set DOC=no
-set EXES_ONLY=no
-goto :a0
-:a2
-shift
-:a3
-shift
-:a0
-if not (%1)==(-c) goto :a1
-set CC=%~2
-if (%2)==(cl) set CC=@call :cl
-goto :a2
-:a1
-if (%1)==(-t) set T=%2&& goto :a2
-if (%1)==(-v) set VERSION=%~2&& goto :a2
-if (%1)==(-i) set INST=%2&& goto :a2
-if (%1)==(-b) set BIN=%2&& goto :a2
-if (%1)==(-d) set DOC=yes&& goto :a3
-if (%1)==(-x) set EXES_ONLY=yes&& goto :a3
-if (%1)==() goto :p1
-:usage
-echo usage: build-tcc.bat [ options ... ]
-echo options:
-echo   -c prog              use prog (gcc/tcc/cl) to compile tcc
-echo   -c "prog options"    use prog with options to compile tcc
-echo   -t 32/64             force 32/64 bit default target
-echo   -v "version"         set tcc version
-echo   -i tccdir            install tcc into tccdir
-echo   -b bindir            optionally install binaries into bindir elsewhere
-echo   -d                   create tcc-doc.html too (needs makeinfo)
-echo   -x                   just create the executables
-echo   -clean               delete all previously produced files and directories
-exit /B 1
-
-@rem ------------------------------------------------------
-@rem sub-routines
-
-:cleanup
-set LOG=echo
-%LOG% removing files:
-for %%f in (*tcc.exe libtcc.dll lib\*.a) do call :del_file %%f
-for %%f in (..\config.h ..\config.texi) do call :del_file %%f
-for %%f in (include\*.h) do @if exist ..\%%f call :del_file %%f
-for %%f in (include\tcclib.h examples\libtcc_test.c) do call :del_file %%f
-for %%f in (*.o *.obj *.def *.pdb *.lib *.exp *.ilk) do call :del_file %%f
-%LOG% removing directories:
-for %%f in (doc libtcc) do call :del_dir %%f
-%LOG% done.
-exit /B 0
-:del_file
-if exist %1 del %1 && %LOG%   %1
-exit /B 0
-:del_dir
-if exist %1 rmdir /Q/S %1 && %LOG%   %1
-exit /B 0
-
-:cl
-@echo off
-set CMD=cl
-:c0
-set ARG=%1
-set ARG=%ARG:.dll=.lib%
-if (%1)==(-shared) set ARG=-LD
-if (%1)==(-o) shift && set ARG=-Fe%2
-set CMD=%CMD% %ARG%
-shift
-if not (%1)==() goto :c0
-echo on
-%CMD% -O1 -W2 -Zi -MT -GS- -nologo -link -opt:ref,icf
-@exit /B %ERRORLEVEL%
-
-@rem ------------------------------------------------------
-@rem main program
-
-:p1
-if not %T%_==_ goto :p2
-set T=32
-if %PROCESSOR_ARCHITECTURE%_==AMD64_ set T=64
-if %PROCESSOR_ARCHITEW6432%_==AMD64_ set T=64
-:p2
-if "%CC:~-3%"=="gcc" set CC=%CC% -Os -s -static
-set D32=-DTCC_TARGET_PE -DTCC_TARGET_I386
-set D64=-DTCC_TARGET_PE -DTCC_TARGET_X86_64
-set P32=i386-win32
-set P64=x86_64-win32
-if %T%==64 goto :t64
-set D=%D32%
-set DX=%D64%
-set PX=%P64%
-goto :p3
-:t64
-set D=%D64%
-set DX=%D32%
-set PX=%P32%
-goto :p3
-
-:p3
-@echo on
-
-:config.h
-echo>..\config.h #define TCC_VERSION "%VERSION%"
-echo>> ..\config.h #ifdef TCC_TARGET_X86_64
-echo>> ..\config.h #define TCC_LIBTCC1 "libtcc1-64.a"
-echo>> ..\config.h #else
-echo>> ..\config.h #define TCC_LIBTCC1 "libtcc1-32.a"
-echo>> ..\config.h #endif
-
-for %%f in (*tcc.exe *tcc.dll) do @del %%f
-
-:compiler
-%CC% -o libtcc.dll -shared ..\libtcc.c %D% -DLIBTCC_AS_DLL
-@if errorlevel 1 goto :the_end
-%CC% -o tcc.exe ..\tcc.c libtcc.dll %D% -DONE_SOURCE"=0"
-%CC% -o %PX%-tcc.exe ..\tcc.c %DX%
-
-@if (%EXES_ONLY%)==(yes) goto :files-done
-
-if not exist libtcc mkdir libtcc
-if not exist doc mkdir doc
-copy>nul ..\include\*.h include
-copy>nul ..\tcclib.h include
-copy>nul ..\libtcc.h libtcc
-copy>nul ..\tests\libtcc_test.c examples
-copy>nul tcc-win32.txt doc
-
-.\tcc -impdef libtcc.dll -o libtcc\libtcc.def
-@if errorlevel 1 goto :the_end
-
-:libtcc1.a
-@set O1=libtcc1.o crt1.o crt1w.o wincrt1.o wincrt1w.o dllcrt1.o dllmain.o chkstk.o bcheck.o
-.\tcc -m32 -c ../lib/libtcc1.c
-.\tcc -m32 -c lib/crt1.c
-.\tcc -m32 -c lib/crt1w.c
-.\tcc -m32 -c lib/wincrt1.c
-.\tcc -m32 -c lib/wincrt1w.c
-.\tcc -m32 -c lib/dllcrt1.c
-.\tcc -m32 -c lib/dllmain.c
-.\tcc -m32 -c lib/chkstk.S
-.\tcc -m32 -w -c ../lib/bcheck.c
-.\tcc -m32 -c ../lib/alloca86.S
-.\tcc -m32 -c ../lib/alloca86-bt.S
-.\tcc -m32 -ar lib/libtcc1-32.a %O1% alloca86.o alloca86-bt.o
-@if errorlevel 1 goto :the_end
-.\tcc -m64 -c ../lib/libtcc1.c
-.\tcc -m64 -c lib/crt1.c
-.\tcc -m64 -c lib/crt1w.c
-.\tcc -m64 -c lib/wincrt1.c
-.\tcc -m64 -c lib/wincrt1w.c
-.\tcc -m64 -c lib/dllcrt1.c
-.\tcc -m64 -c lib/dllmain.c
-.\tcc -m64 -c lib/chkstk.S
-.\tcc -m64 -w -c ../lib/bcheck.c
-.\tcc -m64 -c ../lib/alloca86_64.S
-.\tcc -m64 -c ../lib/alloca86_64-bt.S
-.\tcc -m64 -ar lib/libtcc1-64.a %O1% alloca86_64.o alloca86_64-bt.o
-@if errorlevel 1 goto :the_end
-
-:tcc-doc.html
-@if not (%DOC%)==(yes) goto :doc-done
-echo>..\config.texi @set VERSION %VERSION%
-cmd /c makeinfo --html --no-split ../tcc-doc.texi -o doc/tcc-doc.html
-:doc-done
-
-:files-done
-for %%f in (*.o *.def) do @del %%f
-
-:copy-install
-@if (%INST%)==() goto :the_end
-if not exist %INST% mkdir %INST%
-@if (%BIN%)==() set BIN=%INST%
-if not exist %BIN% mkdir %BIN%
-for %%f in (*tcc.exe *tcc.dll) do @copy>nul %%f %BIN%\%%f
-@if not exist %INST%\lib mkdir %INST%\lib
-for %%f in (lib\*.a lib\*.def) do @copy>nul %%f %INST%\%%f
-for %%f in (include examples libtcc doc) do @xcopy>nul /s/i/q/y %%f %INST%\%%f
-
-:the_end
-exit /B %ERRORLEVEL%
+@rem ------------------------------------------------------
+@rem batch file to build tcc using mingw, msvc or tcc itself
+@rem ------------------------------------------------------
+
+@echo off
+setlocal
+if (%1)==(-clean) goto :cleanup
+set CC=gcc
+set /p VERSION= < ..\VERSION
+set INST=
+set BIN=
+set DOC=no
+set EXES_ONLY=no
+goto :a0
+:a2
+shift
+:a3
+shift
+:a0
+if not (%1)==(-c) goto :a1
+set CC=%~2
+if (%2)==(cl) set CC=@call :cl
+goto :a2
+:a1
+if (%1)==(-t) set T=%2&& goto :a2
+if (%1)==(-v) set VERSION=%~2&& goto :a2
+if (%1)==(-i) set INST=%2&& goto :a2
+if (%1)==(-b) set BIN=%2&& goto :a2
+if (%1)==(-d) set DOC=yes&& goto :a3
+if (%1)==(-x) set EXES_ONLY=yes&& goto :a3
+if (%1)==() goto :p1
+:usage
+echo usage: build-tcc.bat [ options ... ]
+echo options:
+echo   -c prog              use prog (gcc/tcc/cl) to compile tcc
+echo   -c "prog options"    use prog with options to compile tcc
+echo   -t 32/64             force 32/64 bit default target
+echo   -v "version"         set tcc version
+echo   -i tccdir            install tcc into tccdir
+echo   -b bindir            optionally install binaries into bindir elsewhere
+echo   -d                   create tcc-doc.html too (needs makeinfo)
+echo   -x                   just create the executables
+echo   -clean               delete all previously produced files and directories
+exit /B 1
+
+@rem ------------------------------------------------------
+@rem sub-routines
+
+:cleanup
+set LOG=echo
+%LOG% removing files:
+for %%f in (*tcc.exe libtcc.dll lib\*.a) do call :del_file %%f
+for %%f in (..\config.h ..\config.texi) do call :del_file %%f
+for %%f in (include\*.h) do @if exist ..\%%f call :del_file %%f
+for %%f in (include\tcclib.h examples\libtcc_test.c) do call :del_file %%f
+for %%f in (*.o *.obj *.def *.pdb *.lib *.exp *.ilk) do call :del_file %%f
+%LOG% removing directories:
+for %%f in (doc libtcc) do call :del_dir %%f
+%LOG% done.
+exit /B 0
+:del_file
+if exist %1 del %1 && %LOG%   %1
+exit /B 0
+:del_dir
+if exist %1 rmdir /Q/S %1 && %LOG%   %1
+exit /B 0
+
+:cl
+@echo off
+set CMD=cl
+:c0
+set ARG=%1
+set ARG=%ARG:.dll=.lib%
+if (%1)==(-shared) set ARG=-LD
+if (%1)==(-o) shift && set ARG=-Fe%2
+set CMD=%CMD% %ARG%
+shift
+if not (%1)==() goto :c0
+echo on
+%CMD% -O1 -W2 -Zi -MT -GS- -nologo -link -opt:ref,icf
+@exit /B %ERRORLEVEL%
+
+@rem ------------------------------------------------------
+@rem main program
+
+:p1
+if not %T%_==_ goto :p2
+set T=32
+if %PROCESSOR_ARCHITECTURE%_==AMD64_ set T=64
+if %PROCESSOR_ARCHITEW6432%_==AMD64_ set T=64
+:p2
+if "%CC:~-3%"=="gcc" set CC=%CC% -Os -s -static
+set D32=-DTCC_TARGET_PE -DTCC_TARGET_I386
+set D64=-DTCC_TARGET_PE -DTCC_TARGET_X86_64
+set P32=i386-win32
+set P64=x86_64-win32
+if %T%==64 goto :t64
+set D=%D32%
+set DX=%D64%
+set PX=%P64%
+goto :p3
+:t64
+set D=%D64%
+set DX=%D32%
+set PX=%P32%
+goto :p3
+
+:p3
+@echo on
+
+:config.h
+echo>..\config.h #define TCC_VERSION "%VERSION%"
+echo>> ..\config.h #ifdef TCC_TARGET_X86_64
+echo>> ..\config.h #define TCC_LIBTCC1 "libtcc1-64.a"
+echo>> ..\config.h #else
+echo>> ..\config.h #define TCC_LIBTCC1 "libtcc1-32.a"
+echo>> ..\config.h #endif
+
+for %%f in (*tcc.exe *tcc.dll) do @del %%f
+
+:compiler
+%CC% -o libtcc.dll -shared ..\libtcc.c %D% -DLIBTCC_AS_DLL
+@if errorlevel 1 goto :the_end
+%CC% -o tcc.exe ..\tcc.c libtcc.dll %D% -DONE_SOURCE"=0"
+%CC% -o %PX%-tcc.exe ..\tcc.c %DX%
+
+@if (%EXES_ONLY%)==(yes) goto :files-done
+
+if not exist libtcc mkdir libtcc
+if not exist doc mkdir doc
+copy>nul ..\include\*.h include
+copy>nul ..\tcclib.h include
+copy>nul ..\libtcc.h libtcc
+copy>nul ..\tests\libtcc_test.c examples
+copy>nul tcc-win32.txt doc
+
+.\tcc -impdef libtcc.dll -o libtcc\libtcc.def
+@if errorlevel 1 goto :the_end
+
+:libtcc1.a
+@set O1=libtcc1.o crt1.o crt1w.o wincrt1.o wincrt1w.o dllcrt1.o dllmain.o chkstk.o bcheck.o
+.\tcc -m32 -c ../lib/libtcc1.c
+.\tcc -m32 -c lib/crt1.c
+.\tcc -m32 -c lib/crt1w.c
+.\tcc -m32 -c lib/wincrt1.c
+.\tcc -m32 -c lib/wincrt1w.c
+.\tcc -m32 -c lib/dllcrt1.c
+.\tcc -m32 -c lib/dllmain.c
+.\tcc -m32 -c lib/chkstk.S
+.\tcc -m32 -w -c ../lib/bcheck.c
+.\tcc -m32 -c ../lib/alloca86.S
+.\tcc -m32 -c ../lib/alloca86-bt.S
+.\tcc -m32 -ar lib/libtcc1-32.a %O1% alloca86.o alloca86-bt.o
+@if errorlevel 1 goto :the_end
+.\tcc -m64 -c ../lib/libtcc1.c
+.\tcc -m64 -c lib/crt1.c
+.\tcc -m64 -c lib/crt1w.c
+.\tcc -m64 -c lib/wincrt1.c
+.\tcc -m64 -c lib/wincrt1w.c
+.\tcc -m64 -c lib/dllcrt1.c
+.\tcc -m64 -c lib/dllmain.c
+.\tcc -m64 -c lib/chkstk.S
+.\tcc -m64 -w -c ../lib/bcheck.c
+.\tcc -m64 -c ../lib/alloca86_64.S
+.\tcc -m64 -c ../lib/alloca86_64-bt.S
+.\tcc -m64 -ar lib/libtcc1-64.a %O1% alloca86_64.o alloca86_64-bt.o
+@if errorlevel 1 goto :the_end
+
+:tcc-doc.html
+@if not (%DOC%)==(yes) goto :doc-done
+echo>..\config.texi @set VERSION %VERSION%
+cmd /c makeinfo --html --no-split ../tcc-doc.texi -o doc/tcc-doc.html
+:doc-done
+
+:files-done
+for %%f in (*.o *.def) do @del %%f
+
+:copy-install
+@if (%INST%)==() goto :the_end
+if not exist %INST% mkdir %INST%
+@if (%BIN%)==() set BIN=%INST%
+if not exist %BIN% mkdir %BIN%
+for %%f in (*tcc.exe *tcc.dll) do @copy>nul %%f %BIN%\%%f
+@if not exist %INST%\lib mkdir %INST%\lib
+for %%f in (lib\*.a lib\*.def) do @copy>nul %%f %INST%\%%f
+for %%f in (include examples libtcc doc) do @xcopy>nul /s/i/q/y %%f %INST%\%%f
+
+:the_end
+exit /B %ERRORLEVEL%
diff -ur extracted/git/win32/tcc-win32.txt extracted/tarball/win32/tcc-win32.txt
--- extracted/git/win32/tcc-win32.txt	2022-06-04 13:47:38.937998421 +0200
+++ extracted/tarball/win32/tcc-win32.txt	2017-12-17 09:27:05.000000000 +0100
@@ -1,168 +1,168 @@
-
-    TinyCC
-    ======
-
-    This file contains specific information for usage of TinyCC
-    under MS-Windows.  See tcc-doc.html to have all the features.
-
-
-    Installation from the binary ZIP package:
-    -----------------------------------------
-    Unzip the package to a directory of your choice.
-    
-
-    Set the system PATH:
-    --------------------
-    To be able to invoke the compiler from everywhere on your computer by
-    just typing "tcc", please add the directory containing tcc.exe to your
-    system PATH.
-
-
-    Include and library search paths
-    --------------------------------
-    On windows,  the standard "include" and "lib" directories are searched
-    relatively from the location of the executables (tcc.exe, libtcc.dll).
-
-
-    Examples:
-    ---------
-    Open a console window (DOS box) and 'cd' to the examples directory.
-
-    For the 'Fibonacci' example type:
-
-	tcc fib.c
-
-    For the 'Hello Windows' GUI example type:
-
-	tcc hello_win.c
-
-    For the 'Hello DLL' example type
-
-	tcc -shared dll.c
-	tcc -impdef dll.dll (optional)
-        tcc hello_dll.c dll.def
-
-
-    Using libtcc as JIT compiler in your program
-    --------------------------------------------
-    Check out the 'libtcc_test' example:
-
-    - Running it from source:
-        tcc -I libtcc libtcc/libtcc.def -run examples/libtcc_test.c
-
-    - Compiling with TCC:
-        tcc examples/libtcc_test.c -I libtcc libtcc/libtcc.def
-
-    - Compiling with MinGW:
-        gcc examples/libtcc_test.c -I libtcc libtcc.dll -o libtcc_test.exe
-
-    - Compiling with MSVC:
-        lib /def:libtcc\libtcc.def /out:libtcc.lib
-        cl /MD examples/libtcc_test.c -I libtcc libtcc.lib
-
-
-    Import Definition Files:
-    ------------------------
-    To link with Windows system DLLs, TCC uses import definition
-    files (.def) instead of libraries.
-
-    The now built-in 'tiny_impdef' program may be used to make
-    additional .def files for any DLL. For example
-
-        tcc -impdef [-v] opengl32.dll [-o opengl32.def]
-
-    Put opengl32.def into the tcc/lib directory.  Specify -lopengl32 at
-    the TCC commandline to link a program that uses opengl32.dll.
-
-
-    Header Files:
-    -------------
-    The system header files (except _mingw.h) are from the MinGW
-    distribution:
-
-	http://www.mingw.org/
-
-    From the windows headers, only a minimal set is included.  If you need
-    more,  get MinGW's "w32api" package.  Extract the files from "include"
-    into your "tcc/include/winapi" directory.
-
-
-    Resource Files:
-    ---------------
-    TCC can link windows resources in coff format as generated by MinGW's
-    windres.exe.  For example:
-
-        windres -O coff app.rc -o appres.o
-        tcc app.c appres.o -o app.exe
-
-
-    Tiny Libmaker:
-    --------------
-    The now built-in tiny_libmaker tool by Timovj Lahde can be used as
-    'ar' replacement to make a library from several object files:
-
-	tcc -ar [rcsv] library objectfiles ...
-
-
-    Compilation from source:
-    ------------------------
-    * You can use the MinGW and MSYS tools available at
-        http://www.mingw.org
-        http://www.mingw-w64.org
-        http://www.msys2.org
-
-      Untar the TCC archive and type in the MSYS shell:
-        ./configure [--prefix installpath]
-        make
-        make install
-
-      The default install location is c:\Program Files\tcc
-
-      Cygwin can be used too with its mingw cross-compiler installed:
-        ./configure --cross-prefix=i686-w64-mingw32-
-        (the prefix may vary)
-
-    * Alternatively you can compile TCC with just GCC from MinGW using
-        > build-tcc.bat (from the win32 directory)
-
-      Also MSVC can be used with the "VSTools Developer Command Prompt":
-        > build-tcc.bat -c cl
-
-      or with an existing tcc (needs to be in a different directory)
-        > build-tcc.bat -c some-tcc-dir\tcc.exe
-
-      Also you can copy/install everything into another directory:
-        > build-tcc.bat -i <dir>
-
-    Limitations:
-    ------------
-    - On the object file level, currently TCC supports only the ELF format,
-      not COFF as used by MinGW and MSVC.  It is not possible to exchange
-      object files or libraries between TCC and these compilers.
-
-      However libraries for TCC from objects by TCC can be made using
-        tcc -ar lib.a files.o ,,,
-
-    - No leading underscore is generated in the ELF symbols.
-
-    Documentation and License:
-    --------------------------
-    TCC is distributed under the GNU Lesser General Public License. (See
-    COPYING file or http://www.gnu.org/licenses/lgpl-2.1.html)
-
-    TinyCC homepage is at:
-
-	http://fabrice.bellard.free.fr/tcc/
-
-
-    WinAPI Help and 3rd-party tools:
-    --------------------------------
-    The Windows API documentation (Win95) in a single .hlp file is
-    available on the lcc-win32 site as "win32hlp.exe" or from other
-    locations as "win32hlp_big.zip".
-
-    A nice RAD tool to create windows resources (dialog boxes etc.) is
-    "ResEd", available at the RadASM website.
-
-
-    --- grischka
+
+    TinyCC
+    ======
+
+    This file contains specific information for usage of TinyCC
+    under MS-Windows.  See tcc-doc.html to have all the features.
+
+
+    Installation from the binary ZIP package:
+    -----------------------------------------
+    Unzip the package to a directory of your choice.
+    
+
+    Set the system PATH:
+    --------------------
+    To be able to invoke the compiler from everywhere on your computer by
+    just typing "tcc", please add the directory containing tcc.exe to your
+    system PATH.
+
+
+    Include and library search paths
+    --------------------------------
+    On windows,  the standard "include" and "lib" directories are searched
+    relatively from the location of the executables (tcc.exe, libtcc.dll).
+
+
+    Examples:
+    ---------
+    Open a console window (DOS box) and 'cd' to the examples directory.
+
+    For the 'Fibonacci' example type:
+
+	tcc fib.c
+
+    For the 'Hello Windows' GUI example type:
+
+	tcc hello_win.c
+
+    For the 'Hello DLL' example type
+
+	tcc -shared dll.c
+	tcc -impdef dll.dll (optional)
+        tcc hello_dll.c dll.def
+
+
+    Using libtcc as JIT compiler in your program
+    --------------------------------------------
+    Check out the 'libtcc_test' example:
+
+    - Running it from source:
+        tcc -I libtcc libtcc/libtcc.def -run examples/libtcc_test.c
+
+    - Compiling with TCC:
+        tcc examples/libtcc_test.c -I libtcc libtcc/libtcc.def
+
+    - Compiling with MinGW:
+        gcc examples/libtcc_test.c -I libtcc libtcc.dll -o libtcc_test.exe
+
+    - Compiling with MSVC:
+        lib /def:libtcc\libtcc.def /out:libtcc.lib
+        cl /MD examples/libtcc_test.c -I libtcc libtcc.lib
+
+
+    Import Definition Files:
+    ------------------------
+    To link with Windows system DLLs, TCC uses import definition
+    files (.def) instead of libraries.
+
+    The now built-in 'tiny_impdef' program may be used to make
+    additional .def files for any DLL. For example
+
+        tcc -impdef [-v] opengl32.dll [-o opengl32.def]
+
+    Put opengl32.def into the tcc/lib directory.  Specify -lopengl32 at
+    the TCC commandline to link a program that uses opengl32.dll.
+
+
+    Header Files:
+    -------------
+    The system header files (except _mingw.h) are from the MinGW
+    distribution:
+
+	http://www.mingw.org/
+
+    From the windows headers, only a minimal set is included.  If you need
+    more,  get MinGW's "w32api" package.  Extract the files from "include"
+    into your "tcc/include/winapi" directory.
+
+
+    Resource Files:
+    ---------------
+    TCC can link windows resources in coff format as generated by MinGW's
+    windres.exe.  For example:
+
+        windres -O coff app.rc -o appres.o
+        tcc app.c appres.o -o app.exe
+
+
+    Tiny Libmaker:
+    --------------
+    The now built-in tiny_libmaker tool by Timovj Lahde can be used as
+    'ar' replacement to make a library from several object files:
+
+	tcc -ar [rcsv] library objectfiles ...
+
+
+    Compilation from source:
+    ------------------------
+    * You can use the MinGW and MSYS tools available at
+        http://www.mingw.org
+        http://www.mingw-w64.org
+        http://www.msys2.org
+
+      Untar the TCC archive and type in the MSYS shell:
+        ./configure [--prefix installpath]
+        make
+        make install
+
+      The default install location is c:\Program Files\tcc
+
+      Cygwin can be used too with its mingw cross-compiler installed:
+        ./configure --cross-prefix=i686-w64-mingw32-
+        (the prefix may vary)
+
+    * Alternatively you can compile TCC with just GCC from MinGW using
+        > build-tcc.bat (from the win32 directory)
+
+      Also MSVC can be used with the "VSTools Developer Command Prompt":
+        > build-tcc.bat -c cl
+
+      or with an existing tcc (needs to be in a different directory)
+        > build-tcc.bat -c some-tcc-dir\tcc.exe
+
+      Also you can copy/install everything into another directory:
+        > build-tcc.bat -i <dir>
+
+    Limitations:
+    ------------
+    - On the object file level, currently TCC supports only the ELF format,
+      not COFF as used by MinGW and MSVC.  It is not possible to exchange
+      object files or libraries between TCC and these compilers.
+
+      However libraries for TCC from objects by TCC can be made using
+        tcc -ar lib.a files.o ,,,
+
+    - No leading underscore is generated in the ELF symbols.
+
+    Documentation and License:
+    --------------------------
+    TCC is distributed under the GNU Lesser General Public License. (See
+    COPYING file or http://www.gnu.org/licenses/lgpl-2.1.html)
+
+    TinyCC homepage is at:
+
+	http://fabrice.bellard.free.fr/tcc/
+
+
+    WinAPI Help and 3rd-party tools:
+    --------------------------------
+    The Windows API documentation (Win95) in a single .hlp file is
+    available on the lcc-win32 site as "win32hlp.exe" or from other
+    locations as "win32hlp_big.zip".
+
+    A nice RAD tool to create windows resources (dialog boxes etc.) is
+    "ResEd", available at the RadASM website.
+
+
+    --- grischka
